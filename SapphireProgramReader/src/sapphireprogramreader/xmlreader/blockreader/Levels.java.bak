/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Util;

import java.util.ArrayList;
import java.util.List;
import org.dom4j.Element;

/**
 *
 * @author Administrator
 */
public class Levels {
//    <blocks>
//    <DCLevels name="Levels_Standard">
//	<LoadboardRef name="OpenAllRelays" />
//	<!-- POWER -->
//	<DPS sigref="S_VDDCR_CPU">
//		<VForce>VddCrCpu</VForce>
//		<IClampHi>VddCrCpu_IClamp</IClampHi>
//		<IClampMode>Clamp</IClampMode>
//		<OverCurrentDelay>VddCrCpu_OverCurrDly</OverCurrentDelay>
//	</DPS>
//        <DCL sigref="TriggerPins">
//                    <Init>Lo</Init>
//                    <VIH>2.000</VIH>
//                    <VIL>0.000</VIL>
//                    <VClampHi>2.300</VClampHi>
//                    <VClampLo>-0.300</VClampLo>
//                    <TermVRef>0.000</TermVRef>
//            </DCL>
//    </DCLevels>
//    </blocks>
    
    private String name=null;
    private String LoadboardRef=null;
    final private List<DPS> dps = new ArrayList<>();
    final private List<DCL> dcl= new ArrayList<>();
    private String fileName=null;
    
    
    public Levels(String name, String fileName) {
        this.name=name;
        this.fileName=fileName;
    }
    
    public Levels(Element element){
        List<Element> nodes= element.elements();
        
        for(Element node: nodes){
            if (node.getName().equals("DPS")){
                this.dps.add(new DPS(node));
            }
        }    
    }
    public DPS buildDPS(Element element){
        return new DPS(element);
    }
    public DCL buildDCL(Element element){
        return new DCL(element);
    }
    public void printVariable(String name, String value){
//            <OverCurrentDelay>VddCrCpu_OverCurrDly</OverCurrentDelay>
        if(value!=null)
            System.out.print("<"+ name + ">" + value + "</" + name + ">");
    }
    
    public void print(){
        //<DCLevels name="Levels_Standard">
        System.out.println("<DCLevels name=\"" + this.name + "\">");
        if(this.LoadboardRef!=null) 
            //<LoadboardRef name="OpenAllRelays" />
            System.out.println("<LoadboardRef name=\"" + this.LoadboardRef + "\" />");
        for(DPS _dps: this.dps){
            _dps.print();
        }
        for(DCL _dcl: this.dcl){
            _dcl.print();
        }
        
    }
    
    public String getLoadboardRef() {
        return LoadboardRef;
    }

    public void setLoadboardRef(String LoadboardRef) {
        this.LoadboardRef = LoadboardRef;
    }
    public void addDCL(DCL dcl){
        this.dcl.add(dcl);
    }
    
    public void addDPS(DPS dps){
        this.dps.add(dps);
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }
    
    public class DPS{
//      <DPS sigref="S_VDDCR_CPU">
//		<VForce>VddCrCpu</VForce>
//		<IClampHi>VddCrCpu_IClamp</IClampHi>
//		<IClampMode>Clamp</IClampMode>
//		<OverCurrentDelay>VddCrCpu_OverCurrDly</OverCurrentDelay>
//	</DPS>
        
        private String sigRef=null;
        private String vForce=null;
        private String iClampHi =null;
        private String iClampMode=null;
        private String overCurrentDelay=null;
        private String iClampSymetrical=null;
        private String compensation=null;

        public DPS(Element element) {
            this.sigRef= element.attributeValue("sigref");
            List<Element> nodes= element.elements();
            for(Element node: nodes){
                switch (node.getName()) {
                    case "IClampHi":
                        this.iClampHi=node.getText();
                        break;
                    case "IClampMode":
                        this.iClampMode=node.getText();
                        break;
                    case "VForce":
                        this.vForce=node.getText();
                        break;
                    case "OverCurrentDelay":
                        this.overCurrentDelay=node.getText();
                        break;
                    case "IClampSymetrical":
                        this.overCurrentDelay=node.getText();
                        break;
                    case "Compensation":
                        this.compensation=node.getText();
                        break;
                    default:
                        System.out.println("UnSupported DPS Mode " + node.getName());
                }
            }          
        }
        
        public void print(){
            System.out.println("<DPS sigref=\"" + this.sigRef + "\">");
            
            
           
            
            if(this.vForce!=null)
                printVariable("VForce", this.vForce);
            if(this.iClampHi!=null)
                printVariable("IClampHi", this.iClampHi);
            if(this.iClampMode!=null)
                printVariable("IClampMode", this.iClampMode);
            if(this.overCurrentDelay!=null)
                printVariable("OverCurrentDelay", this.overCurrentDelay);
            if(this.iClampSymetrical!=null)
                printVariable("IClampSymetrical", this.iClampSymetrical);
            if(this.compensation!=null)
                printVariable("Compensation", this.compensation);
            
            System.out.println("</DPS>");
        }
       
        public void setIClampMode(String iclampMode) {
            this.iClampMode = iclampMode;
        }

        public void setOverCurrentDelay(String overCurrentDelay) {
            this.overCurrentDelay = overCurrentDelay;
        }

        public void setSigRef(String sigRef) {
            this.sigRef = sigRef;
        }

        public void setIClampHi(String iClampHi) {
            this.iClampHi = iClampHi;
        }

        public void setvForce(String vForce) {
            this.vForce = vForce;
        }

        public String getIClampMode() {
            return iClampMode;
        }

        public String getOverCurrentDelay() {
            return overCurrentDelay;
        }

        public String getSigRef() {
            return sigRef;
        }

        public String getIClampHi() {
            return iClampHi;
        }

        public String getVForce() {
            return vForce;
        }

        public String getiClampSymetrical() {
            return iClampSymetrical;
        }

    } 
    
    public class DCL{
        
//        UnSupported Mode VODH
//        UnSupported Mode VODL
//        UnSupported Mode CompareMode
//        UnSupported Mode TermLoadMode
//        UnSupported Mode Coupling
        
//        UnSupported Mode LoadVRef
//        UnSupported Mode IOH
//        UnSupported Mode IOL
        
        private String sigRef=null;
        private String init=null;
        private String vIL=null;
        private String vIH=null;
        private String voL=null;
        private String voH=null;
        private String vClampHi=null;
        private String vClampLo=null;
        private String termVref=null;
        private String vODH=null;
        private String vODL=null;
        private String compareMode=null;
        private String termLoadMode=null;
        private String coupling=null;
        
        private String loadVRef=null;
        private String iOL=null;
        private String iOH=null;
        private String force=null;
                
        public DCL(Element element) {
            
            this.sigRef= element.attributeValue("sigref");
            List<Element> nodes= element.elements();
            for(Element node: nodes){
                switch (node.getName()) {
                    case "Init":
                        this.init=node.getText();
                        break;
                    case "VIH":
                        this.vIH=node.getText();
                        break;
                    case "VIL":
                        this.vIL=node.getText();
                        break;
                    case "VOH":
                        this.voH=node.getText();
                        break;
                    case "VOL":
                        this.voL=node.getText();
                        break;
                    case "VClampHi":
                        this.vClampHi=node.getText();
                        break;
                    case "VClampLo":
                        this.vClampLo=node.getText();
                        break;
                    case "TermVRef":
                        this.termVref=node.getText();
                        break;
                    case"LoadVRef":
                        this.loadVRef=node.getText();
                        break;
                    case"IOL":
                        this.iOL=node.getText();
                        break;
                    case"IOH":
                        this.iOH=node.getText();
                        break;
                        
                        
//         UnSupported Mode VODH
//        UnSupported Mode VODL
//        UnSupported Mode CompareMode
//        UnSupported Mode TermLoadMode
//        UnSupported Mode Coupling   
                    case "VODH":
                        this.vODH=node.getText();
                        break;
                    case "VODL":
                        this.vODL=node.getText();
                        break;
                    case "CompareMode":
                        this.compareMode=node.getText();
                        break;
                    case "TermLoadMode":
                        this.termLoadMode=node.getText();
                        break;
                    case "Coupling":
                        this.coupling=node.getText();
                        break;
//                    UnSupported DCL Mode Force   
                    case "Force":
                        this.force=node.getText();
                        break;    
                    default:
                        System.out.println("UnSupported DCL Mode " + node.getName() + " in "+ name + " in "+ fileName);
                }
            }
        }
        //<DCL sigref="TriggerPins">
//                    <Init>Lo</Init>
//                    <VIH>2.000</VIH>
//                    <VIL>0.000</VIL>
//                    <VClampHi>2.300</VClampHi>
//                    <VClampLo>-0.300</VClampLo>
//                    <TermVRef>0.000</TermVRef>
//            </DCL>
                
        public void print(){
            System.out.println("<DCL sigref=\""+ this.sigRef + "\">");
            printVariable("Init", this.init);
            printVariable("VIH", this.vIH);
            printVariable("VIL", this.vIL);
            printVariable("VOH", this.voH);
            printVariable("VOL", this.voL);
            printVariable("VClampHi", this.vClampHi);
            printVariable("VClampLo", this.vClampLo);
            printVariable("TermVref", this.termVref);
            
//         UnSupported Mode VODH
//        UnSupported Mode VODL
//        UnSupported Mode CompareMode
//        UnSupported Mode TermLoadMode
//        UnSupported Mode Coupling   
            printVariable("VODH", this.vODH);
            printVariable("VODl", this.vODL);
            printVariable("CompareMode", this.compareMode);
            printVariable("TermLoadMode", this.termLoadMode);
            printVariable("Coupling", this.coupling);
            
//        UnSupported Mode LoadVRef
//        UnSupported Mode IOH
//        UnSupported Mode IOL
            
            printVariable("LoadVRef", this.loadVRef);
            printVariable("IOH", this.iOH);
            printVariable("IOL", this.iOL);
            printVariable("Force", this.force);
            
            System.out.println("</DCL>");
            
        }

        public String getvIL() {
            return vIL;
        }

        public String getvIH() {
            return vIH;
        }

        public String getvClampLo() {
            return vClampLo;
        }

        public String getvClampHi() {
            return vClampHi;
        }

        public String getVoL() {
            return voL;
        }

        public String getVoH() {
            return voH;
        }

        public String getTermVref() {
            return termVref;
        }

        public String getInit() {
            return init;
        }

        public String getSigRef() {
            return sigRef;
        }

        public String getiOH() {
            return iOH;
        }

        public String getLoadVRef() {
            return loadVRef;
        }

        public String getiOL() {
            return iOL;
        }

        public String getCompareMode() {
            return compareMode;
        }

        public String getCoupling() {
            return coupling;
        }

        public String getvODH() {
            return vODH;
        }

        public String getvODL() {
            return vODL;
        }

        public String getTermLoadMode() {
            return termLoadMode;
        }

        public String getForce() {
            return force;
        }
        
        
        
        
        
    }
}
